# There are two kinds of continuous integration jobs in this project:
#
# - Every code submission or master push passes continuous integration on the
#   minimal supported Rust version and the current stable Rust version.
# - Two times a month, a scheduled job makes sure that the code remains
#   compatible and lint-free on upcoming Rust toolchains (beta and nightly).

on:
  push:
  pull_request:
  schedule:
    - cron: '0 0 5,19 * *'

name: Continuous Integration

# Cancel existing jobs on new pushes to the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  RUSTFLAGS: '-D warnings'
  HWLOC_VERSION: '2.9.1'
  HWLOC_VERSION_SHORT: '2.9'  # Used in URL to official tarball/binaries
  MINIMAL_RUST: '1.70.0'  # Minimal supported Rust version

jobs:
  # Formatter output doesn't depend on cargo features, and only needs to be
  # tested on the latest supported release of each CI run.
  format:
      # Only run on "pull_request" event for external PRs. This is to avoid
      # duplicate builds for PRs created from internal branches.
      if: github.event_name == 'push' || github.event_name == 'schedule' || github.event.pull_request.head.repo.full_name != github.repository

      runs-on: ubuntu-latest

      steps:
        - name: Checkout sources
          uses: actions/checkout@v4

        - name: Set up stable toolchain
          if: github.event_name != 'schedule'
          uses: actions-rust-lang/setup-rust-toolchain@v1
          with:
            components: rustfmt

        - name: Set up nightly toolchain
          if: github.event_name == 'schedule'
          uses: actions-rust-lang/setup-rust-toolchain@v1
          with:
            toolchain: nightly
            components: rustfmt

        - name: Check format
          run: cargo fmt --all -- --check


  # Clippy and rustc lints depend on cfg(), of which we currently use "feature"
  # and "target_os". So far, hwlocality has Linux- and Windows-specific code,
  # but nothing macOS-specific, so we can cover all configurations by testing on
  # Linux and Windows.
  #
  # We don't care about warnings on the minimum supported Rust version, only
  # about building and running correctly, so we can get away with only testing
  # on the latest rustc release.
  lints:
    # Only run on "pull_request" event for external PRs. This is to avoid
    # duplicate builds for PRs created from internal branches.
    if: github.event_name == 'push' || github.event_name == 'schedule' || github.event.pull_request.head.repo.full_name != github.repository

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
        features:
          - ''
          - '--features=hwloc-2_0_4'
          - '--features=hwloc-2_1_0'
          - '--features=hwloc-2_2_0'
          - '--features=hwloc-2_3_0'
          - '--features=hwloc-2_4_0'
          - '--features=hwloc-2_5_0'
          - '--features=hwloc-2_8_0'
          - '--features=hwloc-latest,bundled'
          - '--features=hwloc-latest,quickcheck'

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Set up stable toolchain
        if: github.event_name != 'schedule'
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy

      - name: Set up nightly toolchain
        if: github.event_name == 'schedule'
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: nightly
          components: clippy

      - name: Set up hwloc
        uses: ./.github/actions/setup-hwloc-dependencies
        with:
          hwloc-version: ${{ env.HWLOC_VERSION }}
          hwloc-version-short: ${{ env.HWLOC_VERSION_SHORT }}
        if: contains(matrix.features, 'bundled') == false

      - name: Check clippy lints
        run: cargo clippy --workspace --all-targets ${{ matrix.features }} -- -D warnings

      - name: Build docs
        run: cargo doc --workspace ${{ matrix.features }}


  # Run the tests and examples on all supported OSes and Rust versions (main CI)
  #
  # FIXME: In an ideal world, it would be enough to test on the first and last
  #        version of each major hwloc series, as within each series versions
  #        are additive and almost solely (*cough cough* add_distances *cough
  #        cough*) add new features to test without removing any.
  #
  #        Unfortunately, `cargo check` does not currently check doctests
  #        (see https://github.com/rust-lang/cargo/issues/6424 ), so we need to
  #        test each version individually to make sure that doctests for a
  #        feature coming from one hwloc version do not use features from newer
  #        hwloc versions (which would force people to needlessly up their hwloc
  #        version requirements if they want to follow the doc examples).
  test-contrib-debug:
    # Only run on "pull_request" event for external PRs. This is to avoid
    # duplicate builds for PRs created from internal branches.
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        rust:
          - stable
          - $MINIMAL_RUST
        features:
          - ''
          - '--features=hwloc-2_0_4'
          - '--features=hwloc-2_1_0'
          - '--features=hwloc-2_2_0'
          - '--features=hwloc-2_3_0'
          - '--features=hwloc-2_4_0'
          - '--features=hwloc-2_5_0'
          - '--features=hwloc-2_8_0'
          - '--features=hwloc-latest,bundled'
          - '--features=hwloc-latest,quickcheck'
        exclude:
          # FIXME: Bundled builds don't currently work on macOS
          - os: macos-latest
            features: '--features=hwloc-latest,bundled'

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Set up toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}

      - name: Set up hwloc
        uses: ./.github/actions/setup-hwloc-dependencies
        with:
          hwloc-version: ${{ env.HWLOC_VERSION }}
          hwloc-version-short: ${{ env.HWLOC_VERSION_SHORT }}
        if: contains(matrix.features, 'bundled') == false

      - name: Set up hwloc build dependencies (macOS)
        run: brew install automake
        if: contains(matrix.features, 'bundled') && startsWith(matrix.os, 'macos')

      - name: Collect system information
        uses: ./.github/actions/system-information
        if: contains(matrix.features, 'bundled') == false

      - name: Run unit and doc tests
        run: cargo test --workspace ${{ matrix.features }}

      - name: Install cargo-examples
        uses: baptiste0928/cargo-install@v2
        with:
          crate: cargo-examples

      - name: Run all examples
        run: cargo examples ${{ matrix.features }}


  # Run the tests and examples on all supported OSes and Rust versions,
  # in release mode
  #
  # Some things like UB or arithmetic overflow differ between debug and release
  # builds, so it's a good idea to run the tests in release mode too.
  #
  # We do not do this in the test-contrib-debug job because switching between
  # debug and release builds trashes the cargo cache.
  #
  # We restrict this to the latest supported hwloc release because the
  # test-contrib-debug job is already testing for basic consistency, so our only
  # goal here is to run as many tests as possible, and running on the latest
  # hwloc release (for all supported compilers and OSes) gives us that.
  test-contrib-release:
    # Only run on "pull_request" event for external PRs. This is to avoid
    # duplicate builds for PRs created from internal branches.
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        rust:
          - stable
          - $MINIMAL_RUST

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Set up toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}

      - name: Set up hwloc
        uses: ./.github/actions/setup-hwloc-dependencies
        with:
          hwloc-version: ${{ env.HWLOC_VERSION }}
          hwloc-version-short: ${{ env.HWLOC_VERSION_SHORT }}

      - name: Collect system information
        uses: ./.github/actions/system-information

      - name: Run unit and doc tests
        run: cargo test --workspace --release --features=hwloc-latest

      - name: Install cargo-examples
        uses: baptiste0928/cargo-install@v2
        with:
          crate: cargo-examples

      - name: Run all examples
        run: cargo examples --features=hwloc-latest -- --release


  # Run the tests with extra stdlib checks and the ASAN sanitizer
  #
  # Here, our goal is only code coverage. We noticeably don't need...
  #
  # - Full version coverage (there's test-contrib-debug for that)
  # - Release build coverage (it shouldn't change stdlib usage or turn code with
  #   valid memory accesses into code with invalid ones)
  # - Full OS coverage (we don't test what happens inside of hwloc, so as with
  #   lints, only testing OSes that have specific Rust code associated with them
  #   in the bindings is fine)
  #
  # Also, as a cargo-careful constraint we can only test nightly.
  test-contrib-careful:
    # Only run on "pull_request" event for external PRs. This is to avoid
    # duplicate builds for PRs created from internal branches.
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Set up toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: nightly
          components: rust-src

      - name: Set up hwloc
        uses: ./.github/actions/setup-hwloc-dependencies
        with:
          hwloc-version: ${{ env.HWLOC_VERSION }}
          hwloc-version-short: ${{ env.HWLOC_VERSION_SHORT }}

      - name: Collect system information
        uses: ./.github/actions/system-information

      - name: Install cargo-examples
        uses: baptiste0928/cargo-install@v2
        with:
          crate: cargo-careful

      - name: Run unit and doc tests under cargo careful + ASAN
        run: |
          # By default, cargo careful disables the leak check, but I actually like it
          export ASAN_OPTIONS=''
          # We don't want warnings-as-errors semantics here since this is nightly
          export RUSTFLAGS=''
          cargo careful test -Zcareful-sanitizer=address --workspace --features=hwloc-latest


  # Check compatibility with newer Rust/deps versions (scheduled CI)
  #
  # We aren't concerned about trashing the cargo cache here since these jobs
  # only run occasionally, so the extra convenience and maintainability of
  # grouping debug and release tests trumps other considerations.
  #
  # FIXME: There should be a way to use conditional build matrices without
  #        duplicating the whole job recipe...
  #
  test-scheduled:
    if: github.event_name == 'schedule'

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        rust:
          - beta
          - nightly
          - $MINIMAL_RUST  # Can be broken by deps
        features:
          - ''
          - '--features=hwloc-2_0_4'
          - '--features=hwloc-2_1_0'
          - '--features=hwloc-2_2_0'
          - '--features=hwloc-2_3_0'
          - '--features=hwloc-2_4_0'
          - '--features=hwloc-2_5_0'
          - '--features=hwloc-2_8_0'
          - '--features=hwloc-latest,bundled'
          - '--features=hwloc-latest,quickcheck'
        exclude:
          # FIXME: Bundled builds don't currently work on macOS
          - os: macos-latest
            features: '--features=hwloc-latest,bundled'

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Set up toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}

      - name: Set up hwloc
        uses: ./.github/actions/setup-hwloc-dependencies
        with:
          hwloc-version: ${{ env.HWLOC_VERSION }}
          hwloc-version-short: ${{ env.HWLOC_VERSION_SHORT }}
        if: contains(matrix.features, 'bundled') == false

      - name: Set up hwloc build dependencies (macOS)
        run: brew install automake
        if: contains(matrix.features, 'bundled') && startsWith(matrix.os, 'macos')

      - name: Collect system information
        uses: ./.github/actions/system-information
        if: contains(matrix.features, 'bundled') == false

      - name: Run basic tests (debug build)
        run: cargo test --workspace ${{ matrix.features }}

      - name: Run basic tests (release build)
        run: cargo test --workspace --release ${{ matrix.features }}

      - name: Install cargo-examples
        uses: baptiste0928/cargo-install@v2
        with:
          crate: cargo-examples

      - name: Run all examples (debug build)
        run: cargo examples ${{ matrix.features }}

      - name: Run all examples (release build)
        run: cargo examples ${{ matrix.features }} -- --release

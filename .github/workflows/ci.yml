# There are two kinds of continuous integration jobs in this project:
#
# - Every code submission or master push passes continuous integration on the
#   minimal supported Rust version and the current stable Rust version.
# - Two times a month, a scheduled job makes sure that the code remains
#   compatible and lint-free on upcoming Rust toolchains (beta and nightly).

on:
  push:
  pull_request:
  schedule:
    - cron: '0 0 4,18 * *'

name: Continuous Integration

env:
  RUSTFLAGS: '-D warnings'
  HWLOC_VERSION: '2.8.0'
  HWLOC_VERSION_SHORT: '2.8' # Used in URL to official tarball/binaries
  WIN_PKGCONFIG_VERSION: '0.28-1'

jobs:
  # Formatter output doesn't depend on cargo features, and only needs to be
  # tested on the latest supported release of each CI run.
  format:
      # Only run on "pull_request" event for external PRs. This is to avoid
      # duplicate builds for PRs created from internal branches.
      if: github.event_name == 'push' || github.event_name == 'schedule' || github.event.pull_request.head.repo.full_name != github.repository

      runs-on: ubuntu-latest

      steps:
        - name: Checkout sources
          uses: actions/checkout@v3

        - name: Set up stable toolchain
          if: github.event_name != 'schedule'
          uses: actions-rust-lang/setup-rust-toolchain@v1
          with:
            components: rustfmt

        - name: Set up nightly toolchain
          if: github.event_name == 'schedule'
          uses: actions-rust-lang/setup-rust-toolchain@v1
          with:
            toolchain: nightly
            components: rustfmt

        - name: Check format
          run: cargo fmt --all -- --check


  # Clippy and rustc lints depend on cfg(), of which we currently use "feature"
  # and "target_os". So far, hwlocality has Linux- and Windows-specific code,
  # but nothing macOS-specific, so we can cover all configurations by testing on
  # Linux and Windows.
  #
  # We don't care about warnings on the minimum supported Rust version, only
  # about building and running correctly, so we can get away with only testing
  # on the latest rustc release.
  lints:
    # Only run on "pull_request" event for external PRs. This is to avoid
    # duplicate builds for PRs created from internal branches.
    if: github.event_name == 'push' || github.event_name == 'schedule' || github.event.pull_request.head.repo.full_name != github.repository

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
        features:
          - ''
          - '--features=hwloc-2_0_4'
          - '--features=hwloc-2_1_0'
          - '--features=hwloc-2_2_0'
          - '--features=hwloc-2_3_0'
          - '--features=hwloc-2_4_0'
          - '--features=hwloc-2_5_0'
          - '--features=hwloc-2_8_0'
          - '--features=hwloc-latest'

    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Set up stable toolchain
        if: github.event_name != 'schedule'
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy

      - name: Set up nightly toolchain
        if: github.event_name == 'schedule'
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: nightly
          components: clippy

      - name: Cache dependencies
        if: matrix.os != 'windows-latest'
        id: cache-deps-unix
        uses: actions/cache@v3
        with:
          path: ${HOME}/hwloc
          key: ${{ runner.os }}-deps-hwloc${{ env.HWLOC_VERSION }}

      - name: Cache dependencies
        if: matrix.os == 'windows-latest'
        id: cache-deps-win
        uses: actions/cache@v3
        with:
          path: |
            %USERPROFILE%/pkgconfig
            %USERPROFILE%/hwloc
          key: ${{ runner.os }}-deps-pkgconfig${{ env.WIN_PKGCONFIG_VERSION }}-hwloc${{ env.HWLOC_VERSION }}

      - name: Install dependencies
        if: matrix.os != 'windows-latest' && steps.cache-deps-unix.outputs.cache-hit != 'true'
        run: |
            curl -L "https://download.open-mpi.org/release/hwloc/v${HWLOC_VERSION_SHORT}/hwloc-${HWLOC_VERSION}.tar.gz" | tar -xz
            cd hwloc-${HWLOC_VERSION}
            ./configure --prefix="${HOME}/hwloc"
            make -j$(nproc)
            make install
            cd ..
            rm -rf ${HWLOC_VERSION}

      - name: Install dependencies
        if: matrix.os == 'windows-latest' && steps.cache-deps-win.outputs.cache-hit != 'true'
        run: |
            echo "Start of script"

            Invoke-WebRequest -OutFile pkg-config.zip https://sourceforge.net/projects/pkgconfiglite/files/$WIN_PKGCONFIG_VERSION/pkg-config-lite-$WIN_PKGCONFIG_VERSION_bin-win32.zip

            echo "After Invoke-WebRequest"

            Expand-Archive -Force pkg-config.zip .

            echo "After Expand-Archive"

            mv pkg-config-lite-$WIN_PKGCONFIG_VERSION %USERPROFILE%/pkgconfig

            echo "After mv"


            Invoke-WebRequest -OutFile hwloc.zip https://download.open-mpi.org/release/hwloc/v$HWLOC_VERSION_SHORT/hwloc-win64-build-$HWLOC_VERSION.zip

            echo "After Invoke-WebRequest"

            Expand-Archive -Force hwloc.zip .

            echo "After Expand-Archive"

            set HWLOC_PREFIX=%USERPROFILE%/hwloc

            echo "After set"

            mv hwloc-win64-build-$HWLOC_VERSION $HWLOC_PREFIX

            echo "After mv"

            set HWLOC_PKGCONFIG=$HWLOC_PREFIX/lib/pkgconfig/hwloc.pc

            echo "After set"

            (Get-Content $HWLOC_PKGCONFIG) |
              ForEach-Object { $_ -replace "^prefix=.*$", "prefix=$HWLOC_PREFIX" } |
                Set-Content $HWLOC_PKGCONFIG

            echo "End of script"

      - name: Bring dependencies into PATHs
        if: matrix.os != 'windows-latest'
        run: |
            HWLOC_PREFIX="${HOME}/hwloc"
            echo "${HWLOC_PREFIX}/bin" >> "$GITHUB_PATH"
            echo "PKG_CONFIG_PATH=${HWLOC_PREFIX}/lib/pkgconfig:${PKG_CONFIG_PATH}" >> "$GITHUB_ENV"

      - name: Bring dependencies into PATHs
        if: matrix.os == 'windows-latest'
        run: |
            set HWLOC_PREFIX="%USERPROFILE%/pkgconfig"
            printf "%s\n" "%USERPROFILE%/pkgconfig/bin" >> "$GITHUB_PATH"
            printf "%s\n%s\n" "$HWLOC_PREFIX/bin" "$HWLOC_PREFIX/lib" >> "$GITHUB_PATH"
            printf "%s\n" "PKG_CONFIG_PATH=$HWLOC_PREFIX/lib/pkgconfig;%PKG_CONFIG_PATH%" >> "$GITHUB_ENV"

      - name: Type-check the program
        run: cargo check --all-targets ${{ matrix.features }}

      - name: Check clippy lints
        run: cargo clippy --all-targets ${{ matrix.features }} -- -D warnings


  # Run the tests and examples on all supported OSes and Rust versions (main CI)
  #
  # In an ideal world, it would be enough to test on the first and last version
  # of each major hwloc series, as within each series versions are additive and
  # almost solely (*cough cough* add_distances *cough cough*) add new features
  # to test without removing any.
  #
  # Unfortunately, `cargo check` does not currently check doctests
  # (see https://github.com/rust-lang/cargo/issues/6424 ), so we need to test
  # each version individually to make sure that doctests for a feature coming
  # from one hwloc version do not use features from newer hwloc versions (which
  # would force people to needlessly up their hwloc version requirements).
  test-contrib:
    # Only run on "pull_request" event for external PRs. This is to avoid
    # duplicate builds for PRs created from internal branches.
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        rust:
          - stable
          - 1.67.1  # Minimum supported Rust version
        features:
          - ''
          - '--features=hwloc-2_0_4'
          - '--features=hwloc-2_1_0'
          - '--features=hwloc-2_2_0'
          - '--features=hwloc-2_3_0'
          - '--features=hwloc-2_4_0'
          - '--features=hwloc-2_5_0'
          - '--features=hwloc-2_8_0'
          - '--features=hwloc-latest'

    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Set up toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}

      - name: Cache dependencies
        if: matrix.os != 'windows-latest'
        id: cache-deps-unix
        uses: actions/cache@v3
        with:
          path: ${HOME}/hwloc
          key: ${{ runner.os }}-deps-hwloc${{ env.HWLOC_VERSION }}

      - name: Cache dependencies
        if: matrix.os == 'windows-latest'
        id: cache-deps-win
        uses: actions/cache@v3
        with:
          path: |
            %USERPROFILE%/pkgconfig
            %USERPROFILE%/hwloc
          key: ${{ runner.os }}-deps-pkgconfig${{ env.WIN_PKGCONFIG_VERSION }}-hwloc${{ env.HWLOC_VERSION }}

      - name: Install dependencies
        if: matrix.os != 'windows-latest' && steps.cache-deps-unix.outputs.cache-hit != 'true'
        run: |
            curl -L "https://download.open-mpi.org/release/hwloc/v${HWLOC_VERSION_SHORT}/hwloc-${HWLOC_VERSION}.tar.gz" | tar -xz
            cd hwloc-${HWLOC_VERSION}
            ./configure --prefix="${HOME}/hwloc"
            make -j$(nproc)
            make install
            cd ..
            rm -rf ${HWLOC_VERSION}

      - name: Install dependencies
        if: matrix.os == 'windows-latest' && steps.cache-deps-win.outputs.cache-hit != 'true'
        run: |
            Invoke-WebRequest -OutFile pkg-config.zip https://sourceforge.net/projects/pkgconfiglite/files/$WIN_PKGCONFIG_VERSION/pkg-config-lite-$WIN_PKGCONFIG_VERSION_bin-win32.zip
            Expand-Archive -Force pkg-config.zip .
            mv pkg-config-lite-$WIN_PKGCONFIG_VERSION %USERPROFILE%/pkgconfig

            Invoke-WebRequest -OutFile hwloc.zip https://download.open-mpi.org/release/hwloc/v$HWLOC_VERSION_SHORT/hwloc-win64-build-$HWLOC_VERSION.zip
            Expand-Archive -Force hwloc.zip .
            set HWLOC_PREFIX=%USERPROFILE%/hwloc
            mv hwloc-win64-build-$HWLOC_VERSION $HWLOC_PREFIX
            set HWLOC_PKGCONFIG=$HWLOC_PREFIX/lib/pkgconfig/hwloc.pc
            (Get-Content $HWLOC_PKGCONFIG) |
              ForEach-Object { $_ -replace "^prefix=.*$", "prefix=$HWLOC_PREFIX" } |
                Set-Content $HWLOC_PKGCONFIG

      - name: Bring dependencies into PATHs
        if: matrix.os != 'windows-latest'
        run: |
            HWLOC_PREFIX="${HOME}/hwloc"
            echo "${HWLOC_PREFIX}/bin" >> "$GITHUB_PATH"
            echo "PKG_CONFIG_PATH=${HWLOC_PREFIX}/lib/pkgconfig:${PKG_CONFIG_PATH}" >> "$GITHUB_ENV"

      - name: Bring dependencies into PATHs
        if: matrix.os == 'windows-latest'
        run: |
            set HWLOC_PREFIX="%USERPROFILE%/pkgconfig"
            printf "%s\n" "%USERPROFILE%/pkgconfig/bin" >> "$GITHUB_PATH"
            printf "%s\n%s\n" "$HWLOC_PREFIX/bin" "$HWLOC_PREFIX/lib" >> "$GITHUB_PATH"
            printf "%s\n" "PKG_CONFIG_PATH=$HWLOC_PREFIX/lib/pkgconfig;%PKG_CONFIG_PATH%" >> "$GITHUB_ENV"

      - name: Run basic tests
        run: cargo test --all-targets ${{ matrix.features }}

      - name: Install cargo-examples
        run: cargo install cargo-examples

      - name: Run all examples
        run: cargo examples ${{ matrix.features }}


  # Check compatibility with newer Rust/deps versions (scheduled CI)
  #
  # FIXME: There should be a way to use conditional build matrices without
  #        duplicating the whole job recipe...
  #
  test-scheduled:
    if: github.event_name == 'schedule'

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        rust:
          - beta
          - nightly
          - 1.67.1  # Minimum supported Rust version (can be broken by deps)
        features:
          - ''
          - '--features=hwloc-2_0_4'
          - '--features=hwloc-2_1_0'
          - '--features=hwloc-2_2_0'
          - '--features=hwloc-2_3_0'
          - '--features=hwloc-2_4_0'
          - '--features=hwloc-2_5_0'
          - '--features=hwloc-2_8_0'
          - '--features=hwloc-latest'

    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Set up toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}

      - name: Cache dependencies
        if: matrix.os != 'windows-latest'
        id: cache-deps-unix
        uses: actions/cache@v3
        with:
          path: ${HOME}/hwloc
          key: ${{ runner.os }}-deps-hwloc${{ env.HWLOC_VERSION }}

      - name: Cache dependencies
        if: matrix.os == 'windows-latest'
        id: cache-deps-win
        uses: actions/cache@v3
        with:
          path: |
            %USERPROFILE%/pkgconfig
            %USERPROFILE%/hwloc
          key: ${{ runner.os }}-deps-pkgconfig${{ env.WIN_PKGCONFIG_VERSION }}-hwloc${{ env.HWLOC_VERSION }}

      - name: Install dependencies
        if: matrix.os != 'windows-latest' && steps.cache-deps-unix.outputs.cache-hit != 'true'
        run: |
            curl -L "https://download.open-mpi.org/release/hwloc/v${HWLOC_VERSION_SHORT}/hwloc-${HWLOC_VERSION}.tar.gz" | tar -xz
            cd hwloc-${HWLOC_VERSION}
            ./configure --prefix="${HOME}/hwloc"
            make -j$(nproc)
            make install
            cd ..
            rm -rf ${HWLOC_VERSION}

      - name: Install dependencies
        if: matrix.os == 'windows-latest' && steps.cache-deps-win.outputs.cache-hit != 'true'
        run: |
            Invoke-WebRequest -OutFile pkg-config.zip https://sourceforge.net/projects/pkgconfiglite/files/$WIN_PKGCONFIG_VERSION/pkg-config-lite-$WIN_PKGCONFIG_VERSION_bin-win32.zip
            Expand-Archive -Force pkg-config.zip .
            mv pkg-config-lite-$WIN_PKGCONFIG_VERSION %USERPROFILE%/pkgconfig

            Invoke-WebRequest -OutFile hwloc.zip https://download.open-mpi.org/release/hwloc/v$HWLOC_VERSION_SHORT/hwloc-win64-build-$HWLOC_VERSION.zip
            Expand-Archive -Force hwloc.zip .
            set HWLOC_PREFIX=%USERPROFILE%/hwloc
            mv hwloc-win64-build-$HWLOC_VERSION $HWLOC_PREFIX
            set HWLOC_PKGCONFIG=$HWLOC_PREFIX/lib/pkgconfig/hwloc.pc
            (Get-Content $HWLOC_PKGCONFIG) |
              ForEach-Object { $_ -replace "^prefix=.*$", "prefix=$HWLOC_PREFIX" } |
                Set-Content $HWLOC_PKGCONFIG

      - name: Bring dependencies into PATHs
        if: matrix.os != 'windows-latest'
        run: |
            HWLOC_PREFIX="${HOME}/hwloc"
            echo "${HWLOC_PREFIX}/bin" >> "$GITHUB_PATH"
            echo "PKG_CONFIG_PATH=${HWLOC_PREFIX}/lib/pkgconfig:${PKG_CONFIG_PATH}" >> "$GITHUB_ENV"

      - name: Bring dependencies into PATHs
        if: matrix.os == 'windows-latest'
        run: |
            set HWLOC_PREFIX="%USERPROFILE%/pkgconfig"
            printf "%s\n" "%USERPROFILE%/pkgconfig/bin" >> "$GITHUB_PATH"
            printf "%s\n%s\n" "$HWLOC_PREFIX/bin" "$HWLOC_PREFIX/lib" >> "$GITHUB_PATH"
            printf "%s\n" "PKG_CONFIG_PATH=$HWLOC_PREFIX/lib/pkgconfig;%PKG_CONFIG_PATH%" >> "$GITHUB_ENV"

      - name: Run basic tests
        run: cargo test --all-targets ${{ matrix.features }}

      - name: Install cargo-examples
        run: cargo install cargo-examples

      - name: Run all examples
        run: cargo examples ${{ matrix.features }}
